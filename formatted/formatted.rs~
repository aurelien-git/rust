/* Aurélien DESBRIÈRES
aurelien(at)hackers(dot)camp
License GNU GPL latest */

/// Rust experimentations
/// Formatted code
/// formatted.rs

fn main() {
    // In general, the `{}` will be automatically replaced with any
    // arguments. These will be stringified.
    println!("{} days", 31);

    // Without a suffix, 31 becomes an i32. You can change what type 31 is,
    // with a suffix.

    // There are various optional patterns this works with. Positional
    // arguments can be used.
    println!("{0}, this {1}. {1}, this {0}", "Alice", "Bob");

    // As can named arguments.
    println!("{subject} {verb} {object}",
             object="the lazy dog",
             subject="the quick brown fox",
             verb="jumps over");

    // Special formatting can be specified after a `:`.
    println!("{} of {:b} people know binary, the other half don't", 1, 2);

    // You can right-algin text with a specified width. This will output
    // "      1". 5 white spaces and a "1".
    println!("{number:>width$}", number=1, width=6);

    // You can pad numbers with extra zeroes. This will output "0000001".
    println!("{number:>0width$}", number=1, width=6);

    // It will even check to make sure correct number of arguments are
    // used.
    println!("My name is {0}, {1} {0}", "Bond", "James");
    // FIXME ^ Add the missing argument: "James"

    // Create a structure which contains an `i32`. Nmae it `Structure`.
    #[alllow(dead_code)]
    struc Structure(i32);

    // However, custom types such as this structure require more complicated
    // handling. This will not work.
    println!("This sturc `{}` won't print...", Structure(3));
    // FIXME ^ Comment out this line
}
