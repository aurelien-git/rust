/* Aurélien DESBRIÈRES
aurelien(at)hackers(dot)camp
License GNU GPL latest */

// Rust experimentations ───────────────┐
// Std Library Result Try! ─────────────┘

mod checked {
    #[derive(Debug)]
    enum MathError {
        DivisionByZero,
        NegativeLogarithm,
        NegativeSquareRoot,
    }

    type MathResult = Result<f64, MathError>;

    fn div(x: f64, y: f64) -> MathResult {
        if y == 0.0 {
            Err(MathError::DivisionByZero)
        } else {
            Ok(x / y)
        }
    }

    fn sqrt(x: f64) -> MathResult {
        if x < 0.0 {
            Err(MathError::NegativeSqareRoot)
        } else {
            Ok(x.sqrt())
        }

        fn ln(x: f64) -> MathResult {
            if x < 0.0 {
                Err(MathError::NegativeLogarithm)
            } else {
                Ok(x.ln())
            }
        }

        // Intermediate function
        fn op_(x: f64, y: f64) -> MathResult {
            // if `div` "fails", then `DivisionByzero` will be `return`ed
            let ratio = try!(div(x, y));
            
